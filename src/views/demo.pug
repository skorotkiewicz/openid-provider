doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Demo Client - OpenID Provider
    style.
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        max-width: 800px;
        margin: 50px auto;
        padding: 20px;
        background: #f8f9fa;
      }
      .demo-container {
        background: white;
        border-radius: 10px;
        padding: 30px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      }
      .login-section {
        text-align: center;
        padding: 40px 20px;
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        margin: 20px 0;
      }
      .login-button {
        background: #667eea;
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 25px;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s;
        margin: 10px;
      }
      .login-button:hover {
        background: #5a6fd8;
        transform: translateY(-2px);
      }
      .user-info {
        background: #e8f4fd;
        border: 1px solid #b3d9ff;
        border-radius: 8px;
        padding: 20px;
        margin: 20px 0;
      }
      .user-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: #667eea;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        margin: 0 auto 20px;
      }
      .user-details {
        text-align: center;
      }
      .user-details h3 {
        margin: 10px 0;
        color: #333;
      }
      .user-details p {
        margin: 5px 0;
        color: #666;
      }
      .profile-section {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #dee2e6;
      }
      .profile-section h4 {
        color: #333;
        margin-bottom: 10px;
      }
      .profile-field {
        margin: 8px 0;
      }
      .profile-field strong {
        color: #495057;
      }
      .profile-field a {
        color: #667eea;
        text-decoration: none;
      }
      .profile-field a:hover {
        text-decoration: underline;
      }
      .logout-button {
        background: #e74c3c;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 20px;
      }
      .logout-button:hover {
        background: #c0392b;
      }
      .status {
        padding: 10px;
        border-radius: 5px;
        margin: 10px 0;
        font-weight: bold;
      }
      .status.loading {
        background: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
      }
      .status.success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }
      .status.error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }
      .code-example {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 5px;
        padding: 15px;
        margin: 20px 0;
        font-family: 'Courier New', monospace;
        font-size: 14px;
        overflow-x: auto;
      }
      .scope-selector {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        margin: 20px 0;
        text-align: left;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
      }
      .scope-selector label {
        display: block;
        margin: 10px 0;
        cursor: pointer;
        padding: 8px;
        border-radius: 5px;
        transition: background 0.2s;
      }
      .scope-selector label:hover {
        background: #e9ecef;
      }
      .scope-selector input[type="radio"] {
        margin-right: 10px;
      }
      .hidden {
        display: none;
      }
  body
    .demo-container
      h1 🔐 OpenID Provider Demo
      p This demo shows how to integrate with our OpenID Provider using OAuth 2.0 Authorization Code Flow.

      .login-section(id="login-section")
        h2 Step 1: Login with OpenID Provider
        p Choose the scope for your authentication request:

        .scope-selector
          label
            input(type="radio", name="scope", value="openid", checked)
            strong openid
            |  - Basic authentication only
            br
            small ✅ User identification
          br
          label
            input(type="radio", name="scope", value="openid email")
            strong openid email
            |  - Include email address
            br
            small ✅ User identification + Email
          br
          label
            input(type="radio", name="scope", value="openid name")
            strong openid name
            |  - Include name only
            br
            small ✅ User identification + Name
          br
          label
            input(type="radio", name="scope", value="openid name email")
            strong openid name email
            |  - Name and email
            br
            small ✅ User identification + Name + Email
          br
          label
            input(type="radio", name="scope", value="openid about website")
            strong openid about website
            |  - Personal info
            br
            small ✅ User identification + About + Website
          br
          label
            input(type="radio", name="scope", value="openid twitter github")
            strong openid twitter github
            |  - Social profiles
            br
            small ✅ User identification + Twitter + GitHub
          br
          label
            input(type="radio", name="scope", value="openid profile")
            strong openid profile
            |  - Full profile (legacy)
            br
            small ✅ User identification + Name + About + Website + Social
          br
          label
            input(type="radio", name="scope", value="openid profile email")
            strong openid profile email
            |  - Full access
            br
            small ✅ User identification + Name + Email + About + Website + Social

        button.login-button(id="login-button", onclick="startOAuthFlow()") 🚀 Login with OpenID Provider
        .status.hidden(id="status")

      .user-info.hidden(id="user-section")
        h2 ✅ Authentication Successful!
        .user-avatar(id="user-avatar") 👤
        .user-details
          h3(id="user-name") Loading...
          p
            strong Email:
            span(id="user-email") Loading...
          p
            strong User ID:
            span(id="user-id") Loading...
          p
            strong Login Time:
            span(id="login-time") Loading...
        button.logout-button(onclick="logout()") Logout

      .code-example
        h3 OAuth Flow Implementation:
        pre(id="code-display")
          // Current status will be shown here
          // 1. Click "Login with OpenID Provider"
          // 2. Redirect to authorization endpoint
          // 3. User logs in and grants permission
          // 4. Return with authorization code
          // 5. Exchange code for access token
          // 6. Fetch user information
          // 7. Display user data

    script.
      // Configuration - will be loaded from server
      let OAUTH_CONFIG = null;

      // State management
      let accessToken = null;
      let refreshToken = null;
      let userInfo = null;
      let tokenExpiry = null;

      // Load configuration from server
      async function loadConfig() {
        try {
          const response = await fetch('/demo/config');
          if (response.ok) {
            OAUTH_CONFIG = await response.json();
            console.log('Demo Client Configuration loaded from server');
          } else {
            console.error('Failed to load config from server');
            // Fallback configuration (without secret)
            OAUTH_CONFIG = {
              clientId: 'demo-client-id',
              redirectUri: window.location.origin + '/demo',
              authorizationEndpoint: '#{baseUrl}/oauth/authorize',
              tokenEndpoint: '#{baseUrl}/oauth/token',
              userinfoEndpoint: '#{baseUrl}/oauth/userinfo',
              scope: 'openid profile'
            };
          }
        } catch (error) {
          console.error('Error loading config:', error);
          // Fallback configuration (without secret)
          OAUTH_CONFIG = {
            clientId: 'demo-client-id',
            redirectUri: window.location.origin + '/demo',
            authorizationEndpoint: '#{baseUrl}/oauth/authorize',
            tokenEndpoint: '#{baseUrl}/oauth/token',
            userinfoEndpoint: '#{baseUrl}/oauth/userinfo',
            scope: 'openid profile'
          };
        }
      }

    script.
      // Initialize on page load
      document.addEventListener('DOMContentLoaded', async function() {
        // Load configuration first
        await loadConfig();

        const urlParams = new URLSearchParams(window.location.search);
        const code = urlParams.get('code');
        const state = urlParams.get('state');
        const error = urlParams.get('error');

        if (error) {
          showStatus('Error: ' + error, 'error');
          return;
        }

        if (code) {
          // We have an authorization code, exchange it for tokens
          exchangeCodeForToken(code);
        } else if (localStorage.getItem('demo_access_token')) {
          // We have stored tokens, load them
          accessToken = localStorage.getItem('demo_access_token');
          refreshToken = localStorage.getItem('demo_refresh_token');
          tokenExpiry = parseInt(localStorage.getItem('demo_token_expiry'));

          // Check if token is expired or will expire soon
          if (Date.now() >= tokenExpiry - 300000) { // 5 minutes before expiry
            refreshAccessToken();
          } else {
            fetchUserInfo();
          }
        } else {
          // No code or token, show login button
          showLoginSection();
        }
      });

      function startOAuthFlow() {
        showStatus('Redirecting to OpenID Provider...', 'loading');

        // Get selected scope from radio buttons
        const selectedScope = document.querySelector('input[name="scope"]:checked').value;

        // Generate state for CSRF protection
        const state = generateState();

        // Build authorization URL
        const authUrl = new URL(OAUTH_CONFIG.authorizationEndpoint);
        authUrl.searchParams.set('client_id', OAUTH_CONFIG.clientId);
        authUrl.searchParams.set('response_type', 'code');
        authUrl.searchParams.set('redirect_uri', OAUTH_CONFIG.redirectUri);
        authUrl.searchParams.set('scope', selectedScope);
        authUrl.searchParams.set('state', state);

        updateCodeDisplay('Redirecting to authorization endpoint...', authUrl.toString());

        // Redirect to authorization endpoint
        window.location.href = authUrl.toString();
      }

      async function exchangeCodeForToken(code) {
        showStatus('Exchanging authorization code for access token...', 'loading');

        try {
          // Use server-side token exchange for security
          const response = await fetch('/demo/token', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
              code: code,
              redirect_uri: OAUTH_CONFIG.redirectUri
            })
          });

          if (!response.ok) {
            throw new Error('Failed to exchange code for token');
          }

          const tokenData = await response.json();
          accessToken = tokenData.access_token;
          refreshToken = tokenData.refresh_token;
          tokenExpiry = Date.now() + (tokenData.expires_in * 1000);

          updateCodeDisplay('Token exchange successful!', JSON.stringify(tokenData, null, 2));

          // Store tokens for future use
          localStorage.setItem('demo_access_token', accessToken);
          localStorage.setItem('demo_refresh_token', refreshToken);
          localStorage.setItem('demo_token_expiry', tokenExpiry.toString());

          // Set up automatic token refresh
          scheduleTokenRefresh();

          // Clean up URL
          window.history.replaceState({}, document.title, window.location.pathname);

          // Fetch user information
          fetchUserInfo();
        } catch (error) {
          console.error('Token exchange error:', error);
          showStatus('Failed to exchange authorization code', 'error');
          updateCodeDisplay('Token exchange failed', error.message);
        }
      }

      async function fetchUserInfo() {
        if (!accessToken) {
          showLoginSection();
          return;
        }

        showStatus('Fetching user information...', 'loading');

        try {
          const response = await fetch(OAUTH_CONFIG.userinfoEndpoint, {
            headers: {
              'Authorization': 'Bearer ' + accessToken
            }
          });

          if (!response.ok) {
            throw new Error('Failed to fetch user info');
          }

          userInfo = await response.json();

          updateCodeDisplay('User info fetched successfully!', JSON.stringify(userInfo, null, 2));

          // Display user information
          displayUserInfo();
        } catch (error) {
          console.error('User info fetch error:', error);
          showStatus('Failed to fetch user information', 'error');
          updateCodeDisplay('User info fetch failed', error.message);
          // Token might be expired, show login again
          localStorage.removeItem('demo_access_token');
          showLoginSection();
        }
      }

      function displayUserInfo() {
        if (!userInfo) return;

        document.getElementById('login-section').classList.add('hidden');
        document.getElementById('user-section').classList.remove('hidden');

        document.getElementById('user-name').textContent = userInfo.name || 'Unknown User';
        document.getElementById('user-email').textContent = userInfo.email || 'No email';
        document.getElementById('user-id').textContent = userInfo.sub || 'No ID';
        document.getElementById('login-time').textContent = new Date().toLocaleString();

        // Set avatar initial
        const initial = (userInfo.name || userInfo.email || 'U').charAt(0).toUpperCase();
        document.getElementById('user-avatar').textContent = initial;

        // Add profile information if available
        let profileHTML = '';
        if (userInfo.about || userInfo.website || userInfo.twitter || userInfo.github) {
          profileHTML = '<div class="profile-section"><h4>Profile Information</h4>';

          if (userInfo.about) {
            profileHTML += '<div class="profile-field"><strong>About:</strong> ' + userInfo.about + '</div>';
          }
          if (userInfo.website) {
            profileHTML += '<div class="profile-field"><strong>Website:</strong> <a href="' + userInfo.website + '" target="_blank">' + userInfo.website + '</a></div>';
          }
          if (userInfo.twitter) {
            const twitterUrl = userInfo.twitter.startsWith('@') ? 'https://twitter.com/' + userInfo.twitter.substring(1) : 'https://twitter.com/' + userInfo.twitter;
            profileHTML += '<div class="profile-field"><strong>Twitter:</strong> <a href="' + twitterUrl + '" target="_blank">' + userInfo.twitter + '</a></div>';
          }
          if (userInfo.github) {
            const githubUrl = userInfo.github.startsWith('http') ? userInfo.github : 'https://github.com/' + userInfo.github;
            profileHTML += '<div class="profile-field"><strong>GitHub:</strong> <a href="' + githubUrl + '" target="_blank">' + userInfo.github + '</a></div>';
          }

          profileHTML += '</div>';
        }

        // Add profile section after user details
        const userDetails = document.querySelector('.user-details');
        const existingProfile = userDetails.querySelector('.profile-section');
        if (existingProfile) {
          existingProfile.remove();
        }
        userDetails.insertAdjacentHTML('beforeend', profileHTML);

        showStatus('Login successful! Welcome ' + (userInfo.name || userInfo.email), 'success');
      }

      async function refreshAccessToken() {
        if (!refreshToken) {
          showLoginSection();
          return;
        }

        showStatus('Refreshing access token...', 'loading');

        try {
          // Use server-side token refresh for security
          const response = await fetch('/demo/token', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams({
              grant_type: 'refresh_token',
              refresh_token: refreshToken
            })
          });

          if (!response.ok) {
            throw new Error('Failed to refresh token');
          }

          const tokenData = await response.json();
          accessToken = tokenData.access_token;
          refreshToken = tokenData.refresh_token;
          tokenExpiry = Date.now() + (tokenData.expires_in * 1000);

          updateCodeDisplay('Token refreshed successfully!', JSON.stringify(tokenData, null, 2));

          // Update stored tokens
          localStorage.setItem('demo_access_token', accessToken);
          localStorage.setItem('demo_refresh_token', refreshToken);
          localStorage.setItem('demo_token_expiry', tokenExpiry.toString());

          // Schedule next refresh
          scheduleTokenRefresh();

          // Continue with user info fetch
          fetchUserInfo();
        } catch (error) {
          console.error('Token refresh error:', error);
          showStatus('Failed to refresh token', 'error');
          updateCodeDisplay('Token refresh failed', error.message);
          // Clear tokens and show login
          localStorage.removeItem('demo_access_token');
          localStorage.removeItem('demo_refresh_token');
          localStorage.removeItem('demo_token_expiry');
          showLoginSection();
        }
      }

      function scheduleTokenRefresh() {
        if (!tokenExpiry) return;

        // Refresh 5 minutes before expiry
        const refreshTime = tokenExpiry - Date.now() - 300000;

        if (refreshTime > 0) {
          setTimeout(() => {
            refreshAccessToken();
          }, refreshTime);
        }
      }

      function logout() {
        accessToken = null;
        refreshToken = null;
        userInfo = null;
        tokenExpiry = null;

        localStorage.removeItem('demo_access_token');
        localStorage.removeItem('demo_refresh_token');
        localStorage.removeItem('demo_token_expiry');

        document.getElementById('user-section').classList.add('hidden');
        showLoginSection();

        updateCodeDisplay('Logged out successfully', 'User has been logged out');
      }

      function showLoginSection() {
        document.getElementById('login-section').classList.remove('hidden');
        document.getElementById('user-section').classList.add('hidden');
        document.getElementById('status').classList.add('hidden');
      }

      function showStatus(message, type) {
        const statusEl = document.getElementById('status');
        statusEl.textContent = message;
        statusEl.className = 'status ' + type;
        statusEl.classList.remove('hidden');
      }

      function updateCodeDisplay(title, content) {
        const codeDisplay = document.getElementById('code-display');
        codeDisplay.innerHTML = '<h3>' + title + '</h3><pre>' + content + '</pre>';
      }

      function generateState() {
        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
      }

doctype html
html
  head
    title Developer Dashboard - OpenID Provider
    meta(name="viewport", content="width=device-width, initial-scale=1")
    style.
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background: #f8f9fa;
        margin: 0;
        padding: 20px;
      }
      .container { max-width: 1200px; margin: 0 auto; }
      .header {
        background: white;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .section {
        background: white;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }
      .client-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        margin: 10px 0;
        background: #fafafa;
      }
      .client-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
      }
      .client-id {
        font-family: monospace;
        background: #f0f0f0;
        padding: 5px 10px;
        border-radius: 4px;
        font-size: 14px;
      }
      .client-secret {
        font-family: monospace;
        background: #fff3cd;
        padding: 5px 10px;
        border-radius: 4px;
        font-size: 14px;
      }
      .redirect-uris {
        background: #e8f4fd;
        padding: 10px;
        border-radius: 4px;
        margin: 10px 0;
      }
      button {
        background: #3498db;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px;
      }
      button:hover { background: #2980b9; }
      .btn-danger { background: #e74c3c; }
      .btn-danger:hover { background: #c0392b; }
      .btn-success { background: #27ae60; }
      .btn-success:hover { background: #229954; }
      .empty-state {
        text-align: center;
        padding: 40px;
        color: #666;
      }
      .integration-example {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        margin: 20px 0;
      }
      code {
        background: #f1f1f1;
        padding: 2px 4px;
        border-radius: 3px;
        font-family: monospace;
      }
      pre {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        overflow-x: auto;
        font-size: 14px;
      }
      .badge {
        background: #e74c3c;
        color: white;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 12px;
        margin-left: 10px;
      }
  body
    .container
      .header
        h1
          | Developer Dashboard
          span.badge ADMIN
        div
          button(onclick="logout()") Logout

      .section
        h2 Your OAuth Applications
        #clients-container
          .empty-state
            p Loading your applications...
        button.btn-success(onclick="createClient()") Create New Application

      .section
        h2 Integration Guide
        p Use these endpoints to integrate with your applications:
        .integration-example
          h4 OAuth 2.0 Endpoints:
          ul
            li
              strong Authorization:
              code #{baseUrl}/oauth/authorize
            li
              strong Token:
              code #{baseUrl}/oauth/token
            li
              strong User Info:
              code #{baseUrl}/oauth/userinfo
            li
              strong JWKS:
              code #{baseUrl}/oauth/jwks
          h4 Example Implementation:
          pre
            | // 1. Redirect users to authorization
            | const authUrl = '#{baseUrl}/oauth/authorize?' +
            |   'client_id=YOUR_CLIENT_ID&' +
            |   'response_type=code&' +
            |   'redirect_uri=YOUR_REDIRECT_URI&' +
            |   'scope=openid profile email&' +
            |   'state=random_state';
            |
            | // 2. Exchange code for tokens (POST)
            | const tokenResponse = await fetch('#{baseUrl}/oauth/token', {
            |   method: 'POST',
            |   headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            |   body: new URLSearchParams({
            |     grant_type: 'authorization_code',
            |     code: 'AUTHORIZATION_CODE',
            |     client_id: 'YOUR_CLIENT_ID',
            |     client_secret: 'YOUR_CLIENT_SECRET',
            |     redirect_uri: 'YOUR_REDIRECT_URI'
            |   })
            | });
            |
            | // 3. Get user information
            | const userResponse = await fetch('#{baseUrl}/oauth/userinfo', {
            |   headers: { 'Authorization': 'Bearer ACCESS_TOKEN' }
            | });

    script.
      let currentUser = null;
      let clients = [];
      let accessToken = null;

      // Get access token from session storage
      function getAccessToken() {
        if (!accessToken) {
          accessToken = sessionStorage.getItem('devToken');
        }
        return accessToken;
      }

      async function loadUserData() {
        try {
          const token = getAccessToken();
          console.log('Loading user data with token:', token);
          const response = await fetch('/dev/api/me', {
            headers: {
              'Authorization': 'Bearer ' + token
            }
          });

          console.log('User API response status:', response.status);
          if (response.ok) {
            const user = await response.json();
            currentUser = user;
            document.querySelector('.header h1').innerHTML = 'Developer Dashboard <span class="badge">ADMIN</span> - Welcome ' + user.email;
          } else {
            // Demo mode
            currentUser = { id: 'dev-user', email: 'developer@example.com' };
            document.querySelector('.header h1').innerHTML = 'Developer Dashboard <span class="badge">ADMIN</span> - Demo Mode';
          }
          loadClients();
        } catch (error) {
          console.error('Failed to load user data:', error);
          // Demo mode fallback
          currentUser = { id: 'dev-user', email: 'developer@example.com' };
          document.querySelector('.header h1').innerHTML = 'Developer Dashboard <span class="badge">ADMIN</span> - Demo Mode';
          loadClients();
        }
      }

      async function loadClients() {
        try {
          const token = getAccessToken();
          console.log('Loading clients with token:', token);
          const response = await fetch('/dev/api/clients', {
            headers: {
              'Authorization': 'Bearer ' + token
            }
          });

          console.log('Clients API response status:', response.status);
          if (!response.ok) {
            throw new Error('Failed to load clients: ' + response.status);
          }

          clients = await response.json();
          console.log('Loaded clients:', clients);
          displayClients();
        } catch (error) {
          console.error('Error loading clients:', error);
          document.getElementById('clients-container').innerHTML = '<div class="empty-state"><p>Error loading applications. Please try again.</p></div>';
        }
      }

      function displayClients() {
        const container = document.getElementById('clients-container');

        if (clients.length === 0) {
          container.innerHTML = '<div class="empty-state"><h3>No applications yet</h3><p>Create your first OAuth application to get started.</p></div>';
          return;
        }

        const clientsHtml = clients.map(client => {
          const redirectUrisHtml = client.redirectUris.map(uri => '<li>' + uri + '</li>').join('');
          return '<div class="client-card">' +
            '<div class="client-header">' +
              '<h3>' + client.name + '</h3>' +
              '<div>' +
                '<button onclick="viewClient(\'' + client.id + '\')">View Details</button>' +
                '<button onclick="deleteClient(\'' + client.id + '\')" class="btn-danger">Delete</button>' +
              '</div>' +
            '</div>' +
            '<div><strong>Client ID:</strong><div class="client-id">' + client.clientId + '</div></div>' +
            '<div><strong>Client Secret:</strong><div class="client-secret" id="secret-' + client.id + '">' +
              '••••••••<button onclick="revealSecret(\'' + client.id + '\')" style="margin-left: 10px;">Show</button>' +
            '</div></div>' +
            '<div class="redirect-uris"><strong>Redirect URIs:</strong><ul>' + redirectUrisHtml + '</ul></div>' +
            '</div>';
        }).join('');

        container.innerHTML = clientsHtml;
      }

      function createClient() {
        const name = prompt('Application name:');
        if (!name) return;

        const redirectUri = prompt('Redirect URI (e.g., http://localhost:3001/auth/callback):');
        if (!redirectUri) return;

        // Scope selection
        const availableScopes = ['openid', 'email', 'name', 'about', 'website', 'twitter', 'github', 'profile'];
        const selectedScopes = [];

        // Simple scope selection - in production you'd use checkboxes
        const scopeInput = prompt('Enter allowed scopes (comma-separated) from: openid,email,name,about,website,twitter,github,profile\\n\\nExample: openid,email,name', 'openid,email');
        if (!scopeInput) return;

        const scopes = scopeInput.split(',').map(s => s.trim()).filter(s => availableScopes.includes(s));
        if (scopes.length === 0) {
          alert('No valid scopes selected. Please try again.');
          return;
        }

        const token = getAccessToken();
        fetch('/dev/api/clients', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + token
          },
          body: JSON.stringify({
            name,
            redirectUris: [redirectUri],
            allowedScopes: scopes
          })
        })
        .then(res => res.json())
        .then(client => {
          clients.unshift(client);
          displayClients();
          alert('Application created!\\n\\nClient ID: ' + client.clientId + '\\nClient Secret: ' + client.clientSecret + '\\nAllowed Scopes: ' + scopes.join(', ') + '\\n\\nSave the client secret - it won\'t be shown again!');
        })
        .catch(error => {
          console.error('Error creating client:', error);
          alert('Failed to create application. Please try again.');
        });
      }

      function revealSecret(clientId) {
        const client = clients.find(c => c.id === clientId);
        if (client) {
          const secretDiv = document.getElementById('secret-' + clientId);
          secretDiv.innerHTML = client.clientSecret + '<button onclick="hideSecret(\'' + clientId + '\')" style="margin-left: 10px;">Hide</button>';
        }
      }

      function hideSecret(clientId) {
        const secretDiv = document.getElementById('secret-' + clientId);
        secretDiv.innerHTML = '••••••••<button onclick="revealSecret(\'' + clientId + '\')" style="margin-left: 10px;">Show</button>';
      }

      function viewClient(clientId) {
        const client = clients.find(c => c.id === clientId);
        if (client) {
          alert('Client Details:\\n\\n' +
            'Name: ' + client.name + '\\n' +
            'Client ID: ' + client.clientId + '\\n' +
            'Created: ' + new Date(client.createdAt).toLocaleDateString() + '\\n' +
            'Redirect URIs: ' + client.redirectUris.join(', '));
        }
      }

      function deleteClient(clientId) {
        if (confirm('Are you sure you want to delete this application? This action cannot be undone.')) {
          const token = getAccessToken();
          fetch('/dev/api/clients/' + clientId, {
            method: 'DELETE',
            headers: {
              'Authorization': 'Bearer ' + token
            }
          })
          .then(response => {
            if (response.ok) {
              clients = clients.filter(c => c.id !== clientId);
              displayClients();
              alert('Application deleted successfully.');
            } else {
              alert('Failed to delete application.');
            }
          })
          .catch(error => {
            console.error('Error deleting client:', error);
            alert('Failed to delete application.');
          });
        }
      }

      function logout() {
        sessionStorage.removeItem('devToken');
        accessToken = null;
        window.location.href = '/';
      }

      // Load data on page load
      loadUserData();
